package main
import (
   "fmt"
   "time"
   "os"
   //"flag"

   "github.com/ava-labs/avalanchego/api"
   "github.com/ava-labs/avalanchego/api/info"
   "github.com/ava-labs/avalanchego/api/health"
   "github.com/ava-labs/avalanchego/api/keystore"

)

// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
//  curl -X POST --data '{"jsonrpc":"2.0","id"     :1,"method" :"info.peers"}' -H 'content-type:application/json;' 127.0.0.1:9650/ext/info


type Payload struct {
	Jsonrpc string `json:"jsonrpc"`
	ID      int    `json:"id"`
	Method  string `json:"method"`
}

type AvaxNode struct {
   Name string
   Address string
   Port int
}


func Info(method string) error {
   return nil
}


/*
type InfoFlag struct {
   Name     string
   Usage    string
   Value    Value
   DefValue string
}
*/

func HealthAPI(command []string) error {

   cmd := command[0]

   node := AvaxNode { Name: "summit", Address: "127.0.0.1", Port: 9650 }
   uri  := fmt.Sprintf("http://%s:%d", node.Address, node.Port)

   var timeout time.Duration = 1000000000
   client := health.NewClient(uri, timeout)

   switch cmd {
      case "health":
         resp, err := client.Health()
         fmt.Println(resp)
         fmt.Println(err)
      case "liveness":
         resp, err := client.GetLiveness()
         fmt.Println(resp)
         fmt.Println(err)
     default:
      fmt.Println(cmd + ": command not found")
   }
   return nil
}

func KeystoreAPI(command []string) error {

   if len(command) > 0 {
      fmt.Println("big pog")
   }

   cmd := command[0]
   var userpass api.UserPass
   if len(command) == 3 {
      user := command[1]
      pass := command[2]
      userpass = api.UserPass{Username: user, Password: pass}
   }

   node := AvaxNode { Name: "summit", Address: "127.0.0.1", Port: 9650 }
   uri  := fmt.Sprintf("http://%s:%d", node.Address, node.Port)

   var timeout time.Duration = 1000000000
   client := keystore.NewClient(uri, timeout)

   switch cmd {
      case "list":
         fmt.Println("list")
         users, _ := client.ListUsers()
         fmt.Println(users)
      case "create":
         fmt.Println("create")
         resp, err := client.CreateUser(userpass)
         fmt.Println(err)
         fmt.Println(resp)
      case "export":
         fmt.Println("export")
         client.ExportUser(userpass)
      case "import":
         fmt.Println("import")
         //client.ImportUser(userpass)
      case "delete":
         fmt.Println("")
         client.DeleteUser(userpass)
      default:
         fmt.Println(cmd + ": command not found")
         os.Exit(1)
   }
   return nil

}

func InfoAPI(command []string) error {

   if len(command) > 0 {
      fmt.Println("big pog")
   }

   cmd := command[0]

   node := AvaxNode { Name: "summit", Address: "127.0.0.1", Port: 9650 }
   uri  := fmt.Sprintf("http://%s:%d", node.Address, node.Port)

   var timeout time.Duration = 1000000000
   infoclient := info.NewClient(uri, timeout)

   switch cmd {
      case "nodeid":
         nodeid, _ := infoclient.GetNodeID()
         fmt.Println("NODE_ID ", nodeid)
      case "networkid":
         networkid, _ := infoclient.GetNetworkID()
         fmt.Println("NETWORK_ID ", networkid)
      case "networkname":
         networkname, _ := infoclient.GetNetworkName()
         fmt.Println("NETWORK_NAME ", networkname)
      case "blockchainid":
         if len(command) < 2 {
            fmt.Println("blockchainid expexted some shit")
            os.Exit(1)
         }
         alias := command[1]
         blockchainid, _ := infoclient.GetBlockchainID(alias)
         fmt.Println("BLOCKCHAIN_ID ", blockchainid)
      case "peers":
         peers, _ := infoclient.Peers()
         fmt.Println("PEERS ", peers)
      case "isboot":
         if len(command) < 2 {
            fmt.Println("isbootstrapped expexted some shit")
            os.Exit(1)
         }
         chain := command[1]
         isboot, _ := infoclient.IsBootstrapped(chain)
         fmt.Println("IS_BOOTSTRAPPED? ", isboot)
      case "txfee":
         txfee, _ := infoclient.GetTxFee()
         fmt.Println("TX_FEE ", txfee)
      case "nodeip":
         ip, _ := infoclient.GetNodeIP()
         fmt.Println("NODE_IP ", ip)
      default:
         fmt.Println(cmd + ": command not found")
         os.Exit(1)
   }

   return nil
}

func main() {

    if len(os.Args) < 2 {
      fmt.Println("usage statement")
      os.Exit(1)
    }

   switch os.Args[1] {
   case "health":
      HealthAPI(os.Args[2:])
   case "info":
      InfoAPI(os.Args[2:])
   case "keystore":
      KeystoreAPI(os.Args[2:])
    default:
      fmt.Println("api resource not supported")
      os.Exit(1)
   }

}
